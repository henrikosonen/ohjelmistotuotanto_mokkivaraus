using ohjelmistotuotanto_projekti;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace VillagePeopleOy
{
    public partial class Mainfrm : MetroFramework.Forms.MetroForm
    {
        List<toimipiste> toimipisteet = new List<toimipiste>();
        List<palvelu> palvelut = new List<palvelu>();
        List<varauksen_palvelut> varauksenpalvelut = new List<varauksen_palvelut>();
        List<varauksen_palvelut> varauksenpalvelut2 = new List<varauksen_palvelut>();
        List<asiakas> asiakkaat = new List<asiakas>();
        List<asiakas> KaikkiAsiakkaat = new List<asiakas>();
        List<asiakas> TulosAsiakkaat = new List<asiakas>();
        List<varaus> varaukset = new List<varaus>();
        DataAccess db = new DataAccess();
        toimipiste toimipiste;
        string alkupvm = "", loppupvm = "", varauspvm;
        palvelu palvelu = new palvelu();
        List<varaus> toimipisteen_varaukset = new List<varaus>();
        asiakas asiakas = new asiakas();
        int lukumaara;
        int varausID;
        string teksti;
        public Mainfrm()
        {
            InitializeComponent();
        }

        private void suljeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Application.Exit();
            // Sammuttaa ohjelman
        }

        private void TyhjennametroBtn_Click(object sender, EventArgs e)
        {
            DialogResult dialogResult = MessageBox.Show("Oletko varma, että haluat tyhjentää kentät?", "Oletko varma?", MessageBoxButtons.YesNo);
            if (dialogResult == DialogResult.Yes)

            // Pyytää varmennuksen kenttien tyhjennykseen

            {


                // Tyhjentää kaikki tekstikentät
            }
            else if (dialogResult == DialogResult.No)
            {
                // Ei tee mitään
            }
        }
        private void UpdateBinding()
        {
            //käyttää toimipisteet listaa
            checkedListBoxPalvelut.DataSource = palvelut;
            TPmetroComboBox.DataSource = toimipisteet;
            //Hakee info funktiota toimipiste luokalta, joka palauttaa arvon toimipiste nimi
            TPmetroComboBox.DisplayMember = "Info";
            checkedListBoxPalvelut.DisplayMember = "Info";

        }

        private void Mainfrm_Load(object sender, EventArgs e)
        {
            //tuottaa palvelut listan
            listBox1.SelectedIndex = -1;
            palvelut = db.GetPalvelu();
            toimipisteet = db.GetToimipiste();
            UpdateBinding();
            varauksenpalvelut.Clear();
            varauksenpalvelut2.Clear();
            toimipisteen_varaukset.Clear();
            varaukset.Clear();
        }

        private void inEnglishToolStripMenuItem_Click(object sender, EventArgs e)
        {
            MainfrmEN mainfrmEn = new MainfrmEN();
            mainfrmEn.Show();
            this.Hide();

        }

        private void asiakastiedotToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Asiakastiedot asiakastiedotfrm = new Asiakastiedot();
            asiakastiedotfrm.Show();
            this.Hide();
        }

        private void helpToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        //valitsee kannasta valitun toimipisteen toimipiste_id:n perusteella
        private void TPmetroComboBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            toimipiste = (toimipiste)TPmetroComboBox.SelectedItem;
            toimipisteen_varaukset = db.GetVaraus(toimipiste.toimipiste_id);
            palvelut = db.GetPalvelu(toimipiste.toimipiste_id);
            UpdateBinding();
        }

        private void hallitsePalveluitaToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Palveluidenhallinta palveluhallinta = new Palveluidenhallinta();
            palveluhallinta.Show();
            this.Hide();
        }

        private void PalvelutcheckedListBox_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void hallitseToimipisteitäToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Toimipistehallinta toimipistehallinta = new Toimipistehallinta();
            toimipistehallinta.Show();
        }

        private void checkedListBoxPalvelut_Click(object sender, EventArgs e)
        {

        }

        private void TallennametroBtn_Click(object sender, EventArgs e)
        {
            //Kysellään sisään asiakas, oletetaan että yhdistelmä etunimi,sukunimi + puhelinnumero on uniikki (TÄHÄN testaus)
            //Pitää luoda että jos ei ole olemasssa niin ilmoitellaan
            varauspvm = DateTime.Now.ToString("yyyyMMdd");
            alkupvm = monthCalendar1.SelectionRange.Start.ToString("yyyyMMdd");
            loppupvm = monthCalendar1.SelectionRange.End.ToString("yyyyMMdd");

            if (listBox1.SelectedIndex > -1)
            {
                db.InsertVaraus(asiakas.asiakas_id, toimipiste.toimipiste_id, varauspvm, alkupvm, loppupvm);

                //Haetaan viimeisin varaus listalle
                varaukset = db.GetVaraus();
                //luodaan lista palveluista varausID:n kanssa
                LuoVarauksenPalvelut2Lista();
                //Viedään arvot kantaan
                VieVarauksenPalvelutKantaan();
            }
            TyhjennäListat();

        }
        private void LuoVarauksenPalvelut2Lista()
        {
            //HUOM varaukset listalla vain viimeisin varaus
            foreach (varaus v in varaukset)
            {
                varausID = v.varaus_id;
            }
            for (int i = 0; i < varauksenpalvelut.Count; i++)
            {
                int palveluID = int.Parse(varauksenpalvelut[i].palvelu_id.ToString());
                varauksen_palvelut vp = new varauksen_palvelut(varausID, palveluID, lukumaara);
                varauksenpalvelut2.Add(vp);
            }
        }

        private void checkedListBoxPalvelut_SelectedValueChanged(object sender, EventArgs e)
        {

        }

        private void checkedListBoxPalvelut_ItemCheck(object sender, ItemCheckEventArgs e)
        {

            if (e.NewValue == CheckState.Checked)
            {
                palvelu = (palvelu)checkedListBoxPalvelut.SelectedItem;
                //pitäiskö luoda kysely että montako kipaletta?     
                lukumaara = 1;
                varauksen_palvelut vp = new varauksen_palvelut(palvelu.palvelu_id);
                varauksenpalvelut.Add(vp);
            }

            else
            {

            }

        }

        private void monthCalendar1_DateChanged(object sender, DateRangeEventArgs e)
        {

        }

        private void hallitseToimipisteitäToolStripMenuItem_Click_1(object sender, EventArgs e)
        {
            Toimipistehallinta toimipistehallinta = new Toimipistehallinta();
            toimipistehallinta.Show();
            this.Hide();
        }

        private void hallitseVarauksiaToolStripMenuItem_Click(object sender, EventArgs e)
        {
            {
                Varaushallinta varaushallinta = new Varaushallinta();
                varaushallinta.Show();
                this.Hide();
            }
        }

        private void textBox1_KeyPress(object sender, KeyPressEventArgs e)
        {

        }

        private void textBox1_TextChanged(object sender, EventArgs e)
        {

        }

        private void textBox1_KeyDown(object sender, KeyEventArgs e)
        {

        }

        private void ENtxtbox_TextChanged(object sender, EventArgs e)
        {

        }

        private void textBox1_TextChanged_1(object sender, EventArgs e)
        {

        }

        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            asiakas = (asiakas)listBox1.SelectedItem;
        }

        private void textBox1_KeyDown_1(object sender, KeyEventArgs e)
        {

        }

        private void varausHistoriaToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Asiakastiedot asiakastiedotfrm = new Asiakastiedot();
            asiakastiedotfrm.Show();
            this.Hide();
        }

        private void textBox1_KeyUp(object sender, KeyEventArgs e)
        {
            if (textBox1.Text == "")
            {
                listBox1.DataSource = null;
            }
            else
            {
                KaikkiAsiakkaat = db.GetAllPeoples();
                TulosAsiakkaat = db.GetPeopleB(textBox1.Text, KaikkiAsiakkaat);
                listBox1.DataSource = TulosAsiakkaat;
                listBox1.DisplayMember = "FullInfo";
            }
        }

        private void Mainfrm_FormClosing(object sender, FormClosingEventArgs e)
        {
            System.Windows.Forms.Application.Exit();
        }

        private void VieVarauksenPalvelutKantaan()
            {
                foreach (varauksen_palvelut vp in varauksenpalvelut2)
                {
                    db.InsertVarauksenPalvelut(vp.varaus_id, vp.palvelu_id, vp.lkm);
                }
            }
            private void TyhjennäListat()
            {              
                varauksenpalvelut.Clear();
                varauksenpalvelut2.Clear();
                toimipisteen_varaukset.Clear();
                varaukset.Clear();
                TulosAsiakkaat.Clear();

                //Tämä tyhjentää palveluista valinnat
                foreach (int i in checkedListBoxPalvelut.CheckedIndices)
                {
                    checkedListBoxPalvelut.SetItemCheckState(i, CheckState.Unchecked);
                }
                TulosAsiakkaat.Clear();

                textBox1.Clear();
                listBox1.DataSource = null;
                listBox1.Items.Clear();
                var today = DateTime.Today;
                monthCalendar1.SelectionStart = today;
                monthCalendar1.SelectionEnd = today;
        }
        
    }
}

